/* Javascript.java */
/* Generated By:JavaCC: Do not edit this line. Javascript.java */
import java.io.*;
public class Javascript implements JavascriptConstants {

        public static void main(String args[]) throws ParseException{
                        try{
                InputStream in = new FileInputStream("express.js");
                Javascript parser = new Javascript(in);
                parser.program();
                System.out.println("Successfully parsed the grammar");
                        }catch(IOException e){
                e.printStackTrace();
                    }
        }

        public static boolean isNotEndOfArray() {
        int i = 1;
        while(getToken(i).image == ","){
            i++;
        }
        return getToken(i).image != "]";
    }

  static final public void primaryExpression() throws ParseException {
    trace_call("primaryExpression");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case IDENTIFIER_NAME:{
        jj_consume_token(IDENTIFIER_NAME);
        break;
        }
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:{
        literal();
        break;
        }
      case 55:{
        arrayLiteral();
        break;
        }
      case 59:{
        objectLiteral();
        break;
        }
      case FUNCTION:{
        functionExpression();
        break;
        }
      case 62:{
        parenthesizedExpression();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("primaryExpression");
    }
}

  static final public void literal() throws ParseException {
    trace_call("literal");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL_LITERAL:{
        jj_consume_token(NULL_LITERAL);
        break;
        }
      case BOOLEAN_LITERAL:{
        jj_consume_token(BOOLEAN_LITERAL);
        break;
        }
      case NUMERIC_LITERAL:{
        jj_consume_token(NUMERIC_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("literal");
    }
}

  static final public void arrayLiteral() throws ParseException {
    trace_call("arrayLiteral");
    try {

      jj_consume_token(55);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 57:{
        ellision();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case THIS:
      case TYPEOF:
      case VOID:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 55:
      case 58:
      case 59:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:{
        elementList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          ellision();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(56);
    } finally {
      trace_return("arrayLiteral");
    }
}

  static final public void ellision() throws ParseException {
    trace_call("ellision");
    try {

      label_1:
      while (true) {
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
      }
    } finally {
      trace_return("ellision");
    }
}

  static final public void elementList() throws ParseException {
    trace_call("elementList");
    try {

      arrayElement();
      label_2:
      while (true) {
        if (isNotEndOfArray()) {
          ;
        } else {
          break label_2;
        }
        ellision();
        arrayElement();
      }
    } finally {
      trace_return("elementList");
    }
}

  static final public void arrayElement() throws ParseException {
    trace_call("arrayElement");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case THIS:
      case TYPEOF:
      case VOID:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 55:
      case 59:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:{
        assignmentExpression();
        break;
        }
      case 58:{
        spreadElement();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("arrayElement");
    }
}

  static final public void spreadElement() throws ParseException {
    trace_call("spreadElement");
    try {

      jj_consume_token(58);
      assignmentExpression();
    } finally {
      trace_return("spreadElement");
    }
}

  static final public void objectLiteral() throws ParseException {
    trace_call("objectLiteral");
    try {

      jj_consume_token(59);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        propertyDefinitionList();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(60);
    } finally {
      trace_return("objectLiteral");
    }
}

  static final public void propertyDefinitionList() throws ParseException {
    trace_call("propertyDefinitionList");
    try {

      propertyDefinition();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(57);
        propertyDefinition();
      }
    } finally {
      trace_return("propertyDefinitionList");
    }
}

  static final public void propertyDefinition() throws ParseException {
    trace_call("propertyDefinition");
    try {

      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(61);
      assignmentExpression();
    } finally {
      trace_return("propertyDefinition");
    }
}

  static final public void parenthesizedExpression() throws ParseException {
    trace_call("parenthesizedExpression");
    try {

      jj_consume_token(62);
      expression();
      jj_consume_token(63);
    } finally {
      trace_return("parenthesizedExpression");
    }
}

  static final public void leftSideExpression() throws ParseException {
    trace_call("leftSideExpression");
    try {

      callExpression();
    } finally {
      trace_return("leftSideExpression");
    }
}

  static final public void callExpression() throws ParseException {
    trace_call("callExpression");
    try {

      primaryExpression();
    } finally {
      trace_return("callExpression");
    }
}

  static final public void updateExpression() throws ParseException {
    trace_call("updateExpression");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 64:
      case 65:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 64:{
          jj_consume_token(64);
          break;
          }
        case 65:{
          jj_consume_token(65);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        leftSideExpression();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_1(2147483647)) {
          leftSideExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 64:{
            jj_consume_token(64);
            break;
            }
          case 65:{
            jj_consume_token(65);
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNCTION:
          case THIS:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case NUMERIC_LITERAL:
          case IDENTIFIER_NAME:
          case 55:
          case 59:
          case 62:{
            leftSideExpression();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("updateExpression");
    }
}

  static final public void unaryExpression() throws ParseException {
    trace_call("unaryExpression");
    try {

      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:
        case TYPEOF:
        case VOID:
        case 66:
        case 67:
        case 68:
        case 69:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:{
          jj_consume_token(DELETE);
          break;
          }
        case VOID:{
          jj_consume_token(VOID);
          break;
          }
        case TYPEOF:{
          jj_consume_token(TYPEOF);
          break;
          }
        case 66:{
          jj_consume_token(66);
          break;
          }
        case 67:{
          jj_consume_token(67);
          break;
          }
        case 68:{
          jj_consume_token(68);
          break;
          }
        case 69:{
          jj_consume_token(69);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      updateExpression();
    } finally {
      trace_return("unaryExpression");
    }
}

  static final public void exponentiationOperator() throws ParseException {
    trace_call("exponentiationOperator");
    try {

      unaryExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 70:{
        jj_consume_token(70);
        exponentiationOperator();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } finally {
      trace_return("exponentiationOperator");
    }
}

  static final public void multiplicativeExpression() throws ParseException {
    trace_call("multiplicativeExpression");
    try {

      exponentiationOperator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 71:
      case 72:
      case 73:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 71:{
          jj_consume_token(71);
          break;
          }
        case 72:{
          jj_consume_token(72);
          break;
          }
        case 73:{
          jj_consume_token(73);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } finally {
      trace_return("multiplicativeExpression");
    }
}

  static final public void additiveExpression() throws ParseException {
    trace_call("additiveExpression");
    try {

      multiplicativeExpression();
      if (jj_2_2(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 69:{
          jj_consume_token(69);
          break;
          }
        case 68:{
          jj_consume_token(68);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        additiveExpression();
      } else {
        ;
      }
    } finally {
      trace_return("additiveExpression");
    }
}

  static final public void shiftExpression() throws ParseException {
    trace_call("shiftExpression");
    try {

      additiveExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 74:
      case 75:
      case 76:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 74:{
          jj_consume_token(74);
          break;
          }
        case 75:{
          jj_consume_token(75);
          break;
          }
        case 76:{
          jj_consume_token(76);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        shiftExpression();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("shiftExpression");
    }
}

  static final public void relationalExpression() throws ParseException {
    trace_call("relationalExpression");
    try {

      shiftExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTANCEOF:
      case 77:
      case 78:
      case 79:
      case 80:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 77:{
          jj_consume_token(77);
          break;
          }
        case 78:{
          jj_consume_token(78);
          break;
          }
        case 79:{
          jj_consume_token(79);
          break;
          }
        case 80:{
          jj_consume_token(80);
          break;
          }
        case INSTANCEOF:{
          jj_consume_token(INSTANCEOF);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relationalExpression();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } finally {
      trace_return("relationalExpression");
    }
}

  static final public void equalityExpression() throws ParseException {
    trace_call("equalityExpression");
    try {

      relationalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 81:
      case 82:
      case 83:
      case 84:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 81:{
          jj_consume_token(81);
          break;
          }
        case 82:{
          jj_consume_token(82);
          break;
          }
        case 83:{
          jj_consume_token(83);
          break;
          }
        case 84:{
          jj_consume_token(84);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        equalityExpression();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } finally {
      trace_return("equalityExpression");
    }
}

  static final public void bitwiseAndExpression() throws ParseException {
    trace_call("bitwiseAndExpression");
    try {

      equalityExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 85:{
        jj_consume_token(85);
        bitwiseAndExpression();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } finally {
      trace_return("bitwiseAndExpression");
    }
}

  static final public void bitwiseXorExpression() throws ParseException {
    trace_call("bitwiseXorExpression");
    try {

      bitwiseAndExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 86:{
        jj_consume_token(86);
        bitwiseXorExpression();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } finally {
      trace_return("bitwiseXorExpression");
    }
}

  static final public void bitwiseOrExpression() throws ParseException {
    trace_call("bitwiseOrExpression");
    try {

      bitwiseXorExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 87:{
        jj_consume_token(87);
        bitwiseOrExpression();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } finally {
      trace_return("bitwiseOrExpression");
    }
}

  static final public void logicalAndExpression() throws ParseException {
    trace_call("logicalAndExpression");
    try {

      bitwiseOrExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 88:{
        jj_consume_token(88);
        logicalAndExpression();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } finally {
      trace_return("logicalAndExpression");
    }
}

  static final public void logicalOrExpression() throws ParseException {
    trace_call("logicalOrExpression");
    try {

      logicalAndExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 89:{
        jj_consume_token(89);
        logicalOrExpression();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } finally {
      trace_return("logicalOrExpression");
    }
}

  static final public void conditionalExpression() throws ParseException {
    trace_call("conditionalExpression");
    try {

      logicalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 90:{
        jj_consume_token(90);
        assignmentExpression();
        jj_consume_token(61);
        assignmentExpression();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } finally {
      trace_return("conditionalExpression");
    }
}

  static final public void assignmentExpression() throws ParseException {
    trace_call("assignmentExpression");
    try {

      if (jj_2_3(2147483647)) {
        leftSideExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 91:{
          jj_consume_token(91);
          break;
          }
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:{
          assignmentOperator();
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        assignmentExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case THIS:
        case TYPEOF:
        case VOID:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case NUMERIC_LITERAL:
        case IDENTIFIER_NAME:
        case 55:
        case 59:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:{
          conditionalExpression();
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("assignmentExpression");
    }
}

  static final public void assignmentOperator() throws ParseException {
    trace_call("assignmentOperator");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 92:{
        jj_consume_token(92);
        break;
        }
      case 93:{
        jj_consume_token(93);
        break;
        }
      case 94:{
        jj_consume_token(94);
        break;
        }
      case 95:{
        jj_consume_token(95);
        break;
        }
      case 96:{
        jj_consume_token(96);
        break;
        }
      case 97:{
        jj_consume_token(97);
        break;
        }
      case 98:{
        jj_consume_token(98);
        break;
        }
      case 99:{
        jj_consume_token(99);
        break;
        }
      case 100:{
        jj_consume_token(100);
        break;
        }
      case 101:{
        jj_consume_token(101);
        break;
        }
      case 102:{
        jj_consume_token(102);
        break;
        }
      case 103:{
        jj_consume_token(103);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("assignmentOperator");
    }
}

  static final public void expression() throws ParseException {
    trace_call("expression");
    try {

      assignmentExpression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_5;
        }
        jj_consume_token(57);
        assignmentExpression();
      }
    } finally {
      trace_return("expression");
    }
}

  static final public void functionExpression() throws ParseException {
    trace_call("functionExpression");
    try {

      if (jj_2_4(2)) {
        namedFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          anonymousFunction();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("functionExpression");
    }
}

  static final public void statement() throws ParseException {
    trace_call("statement");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 104:{
        emptyStatement();
        break;
        }
      case VAR:{
        variableDefinition();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        if (jj_2_5(2147483647)) {
          block();
        } else if (jj_2_6(2147483647)) {
          labeledStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:{
            ifStatement();
            break;
            }
          case SWITCH:{
            switchStatement();
            break;
            }
          case DO:{
            doStatement();
            break;
            }
          case WHILE:{
            whileStatement();
            break;
            }
          case FOR:{
            forStatement();
            break;
            }
          case CONTINUE:{
            continueStatement();
            break;
            }
          case BREAK:{
            breakStatement();
            break;
            }
          case RETURN:{
            returnStatement();
            break;
            }
          case THROW:{
            throwStatement();
            break;
            }
          case TRY:{
            tryStatement();
            break;
            }
          case DELETE:
          case FUNCTION:
          case THIS:
          case TYPEOF:
          case VOID:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case NUMERIC_LITERAL:
          case IDENTIFIER_NAME:
          case 55:
          case 59:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:{
            expressionStatement();
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("statement");
    }
}

  static final public void emptyStatement() throws ParseException {
    trace_call("emptyStatement");
    try {

      jj_consume_token(104);
    } finally {
      trace_return("emptyStatement");
    }
}

  static final public void expressionStatement() throws ParseException {
    trace_call("expressionStatement");
    try {

      expression();
    } finally {
      trace_return("expressionStatement");
    }
}

  static final public void variableDefinition() throws ParseException {
    trace_call("variableDefinition");
    try {

      jj_consume_token(VAR);
      variableDeclarationList();
    } finally {
      trace_return("variableDefinition");
    }
}

  static final public void variableDeclarationList() throws ParseException {
    trace_call("variableDeclarationList");
    try {

      variableDeclaration();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_6;
        }
        jj_consume_token(57);
        variableDeclaration();
      }
    } finally {
      trace_return("variableDeclarationList");
    }
}

  static final public void variableDeclaration() throws ParseException {
    trace_call("variableDeclaration");
    try {

      jj_consume_token(IDENTIFIER_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 91:{
        jj_consume_token(91);
        assignmentExpression();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } finally {
      trace_return("variableDeclaration");
    }
}

  static final public void block() throws ParseException {
    trace_call("block");
    try {

      jj_consume_token(59);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case DELETE:
        case DO:
        case FOR:
        case FUNCTION:
        case IF:
        case RETURN:
        case SWITCH:
        case THIS:
        case THROW:
        case TRY:
        case TYPEOF:
        case VAR:
        case VOID:
        case WHILE:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case NUMERIC_LITERAL:
        case IDENTIFIER_NAME:
        case 55:
        case 59:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 104:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_7;
        }
        statement();
      }
      jj_consume_token(60);
    } finally {
      trace_return("block");
    }
}

  static final public void labeledStatement() throws ParseException {
    trace_call("labeledStatement");
    try {

      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(61);
      if (getToken(1).image != "function") {
        statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          namedFunction();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("labeledStatement");
    }
}

  static final public void ifStatement() throws ParseException {
    trace_call("ifStatement");
    try {

      jj_consume_token(IF);
      jj_consume_token(62);
      expression();
      jj_consume_token(63);
      statement();
      if (jj_2_7(2)) {
        jj_consume_token(ELSE);
        statement();
      } else {
        ;
      }
    } finally {
      trace_return("ifStatement");
    }
}

  static final public void switchStatement() throws ParseException {
    trace_call("switchStatement");
    try {

      jj_consume_token(SWITCH);
      jj_consume_token(62);
      expression();
      jj_consume_token(63);
      caseBlock();
    } finally {
      trace_return("switchStatement");
    }
}

  static final public void caseBlock() throws ParseException {
    trace_call("caseBlock");
    try {

      jj_consume_token(59);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        caseClauses();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DFLT:{
        defaultClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          caseClauses();
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(60);
    } finally {
      trace_return("caseBlock");
    }
}

  static final public void caseClauses() throws ParseException {
    trace_call("caseClauses");
    try {

      label_8:
      while (true) {
        caseClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_8;
        }
      }
    } finally {
      trace_return("caseClauses");
    }
}

  static final public void caseClause() throws ParseException {
    trace_call("caseClause");
    try {

      jj_consume_token(CASE);
      expression();
      jj_consume_token(61);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case DELETE:
        case DO:
        case FOR:
        case FUNCTION:
        case IF:
        case RETURN:
        case SWITCH:
        case THIS:
        case THROW:
        case TRY:
        case TYPEOF:
        case VAR:
        case VOID:
        case WHILE:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case NUMERIC_LITERAL:
        case IDENTIFIER_NAME:
        case 55:
        case 59:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 104:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_9;
        }
        statement();
      }
    } finally {
      trace_return("caseClause");
    }
}

  static final public void defaultClause() throws ParseException {
    trace_call("defaultClause");
    try {

      jj_consume_token(DFLT);
      jj_consume_token(61);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case DELETE:
        case DO:
        case FOR:
        case FUNCTION:
        case IF:
        case RETURN:
        case SWITCH:
        case THIS:
        case THROW:
        case TRY:
        case TYPEOF:
        case VAR:
        case VOID:
        case WHILE:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case NUMERIC_LITERAL:
        case IDENTIFIER_NAME:
        case 55:
        case 59:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 104:{
          ;
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          break label_10;
        }
        statement();
      }
    } finally {
      trace_return("defaultClause");
    }
}

  static final public void doStatement() throws ParseException {
    trace_call("doStatement");
    try {

      jj_consume_token(DO);
      statement();
      jj_consume_token(WHILE);
      jj_consume_token(62);
      expression();
      jj_consume_token(63);
    } finally {
      trace_return("doStatement");
    }
}

  static final public void whileStatement() throws ParseException {
    trace_call("whileStatement");
    try {

      jj_consume_token(WHILE);
      jj_consume_token(62);
      expression();
      jj_consume_token(63);
      statement();
    } finally {
      trace_return("whileStatement");
    }
}

  static final public void forStatement() throws ParseException {
    trace_call("forStatement");
    try {

      jj_consume_token(FOR);
      jj_consume_token(62);
      if (jj_2_8(3)) {
        forHeader();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          forInHeader();
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(63);
      statement();
    } finally {
      trace_return("forStatement");
    }
}

  static final public void forHeader() throws ParseException {
    trace_call("forHeader");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 55:
      case 59:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:{
        forInitializer();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(104);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case THIS:
      case TYPEOF:
      case VOID:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 55:
      case 59:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:{
        expression();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      jj_consume_token(104);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case THIS:
      case TYPEOF:
      case VOID:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 55:
      case 59:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:{
        expression();
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    } finally {
      trace_return("forHeader");
    }
}

  static final public void forInitializer() throws ParseException {
    trace_call("forInitializer");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case THIS:
      case TYPEOF:
      case VOID:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 55:
      case 59:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:{
        expression();
        break;
        }
      case VAR:{
        jj_consume_token(VAR);
        variableDeclarationList();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("forInitializer");
    }
}

  static final public void forInHeader() throws ParseException {
    trace_call("forInHeader");
    try {

      forInBinding();
      jj_consume_token(IN);
      expression();
    } finally {
      trace_return("forInHeader");
    }
}

  static final public void forInBinding() throws ParseException {
    trace_call("forInBinding");
    try {

      jj_consume_token(VAR);
      variableDeclaration();
    } finally {
      trace_return("forInBinding");
    }
}

  static final public void continueStatement() throws ParseException {
    trace_call("continueStatement");
    try {

      jj_consume_token(CONTINUE);
      if (jj_2_9(2)) {
        jj_consume_token(IDENTIFIER_NAME);
      } else {
        ;
      }
    } finally {
      trace_return("continueStatement");
    }
}

  static final public void breakStatement() throws ParseException {
    trace_call("breakStatement");
    try {

      jj_consume_token(BREAK);
      if (jj_2_10(2)) {
        jj_consume_token(IDENTIFIER_NAME);
      } else {
        ;
      }
    } finally {
      trace_return("breakStatement");
    }
}

  static final public void returnStatement() throws ParseException {
    trace_call("returnStatement");
    try {

      jj_consume_token(RETURN);
      if (jj_2_11(2)) {
        expression();
      } else {
        ;
      }
    } finally {
      trace_return("returnStatement");
    }
}

  static final public void throwStatement() throws ParseException {
    trace_call("throwStatement");
    try {

      jj_consume_token(THROW);
      expression();
    } finally {
      trace_return("throwStatement");
    }
}

  static final public void tryStatement() throws ParseException {
    trace_call("tryStatement");
    try {

      jj_consume_token(TRY);
      block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CATCH:{
        catchClauses();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY:{
        finallyClause();
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
    } finally {
      trace_return("tryStatement");
    }
}

  static final public void catchClauses() throws ParseException {
    trace_call("catchClauses");
    try {

      label_11:
      while (true) {
        catchClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATCH:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_11;
        }
      }
    } finally {
      trace_return("catchClauses");
    }
}

  static final public void catchClause() throws ParseException {
    trace_call("catchClause");
    try {

      jj_consume_token(CATCH);
      jj_consume_token(62);
      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(63);
      block();
    } finally {
      trace_return("catchClause");
    }
}

  static final public void finallyClause() throws ParseException {
    trace_call("finallyClause");
    try {

      jj_consume_token(FINALLY);
      block();
    } finally {
      trace_return("finallyClause");
    }
}

  static final public void namedFunction() throws ParseException {
    trace_call("namedFunction");
    try {

      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(62);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        formalParameters();
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(63);
      jj_consume_token(59);
      if (jj_2_12(1)) {
        functionBody();
      } else {
        ;
      }
      jj_consume_token(60);
    } finally {
      trace_return("namedFunction");
    }
}

  static final public void anonymousFunction() throws ParseException {
    trace_call("anonymousFunction");
    try {

      jj_consume_token(FUNCTION);
      jj_consume_token(62);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        formalParameters();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(63);
      jj_consume_token(59);
      if (jj_2_13(1)) {
        functionBody();
      } else {
        ;
      }
      jj_consume_token(60);
    } finally {
      trace_return("anonymousFunction");
    }
}

  static final public void formalParameters() throws ParseException {
    trace_call("formalParameters");
    try {

      jj_consume_token(IDENTIFIER_NAME);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          ;
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          break label_12;
        }
        jj_consume_token(57);
        jj_consume_token(IDENTIFIER_NAME);
      }
    } finally {
      trace_return("formalParameters");
    }
}

  static final public void functionBody() throws ParseException {
    trace_call("functionBody");
    try {

      topStatements();
    } finally {
      trace_return("functionBody");
    }
}

  static final public void topStatement() throws ParseException {
    trace_call("topStatement");
    try {

      if (getToken(1).image != "function") {
        statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          namedFunction();
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("topStatement");
    }
}

  static final public void topStatements() throws ParseException {
    trace_call("topStatements");
    try {

      label_13:
      while (true) {
        topStatement();
        if (jj_2_14(1)) {
          ;
        } else {
          break label_13;
        }
      }
    } finally {
      trace_return("topStatements");
    }
}

  static final public void program() throws ParseException {
    trace_call("program");
    try {
Token t = null;
      topStatements();
      jj_consume_token(0);
    } finally {
      trace_return("program");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_3R_47()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_60()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_84()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_80()
 {
    if (jj_scan_token(90)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_88()
 {
    if (jj_scan_token(89)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_96()
 {
    if (jj_scan_token(88)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_104()
 {
    if (jj_scan_token(87)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_63()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_62()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  static private boolean jj_3R_109()
 {
    if (jj_scan_token(86)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_72()
 {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_113()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_79()
 {
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_115()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    }
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    return false;
  }

  static private boolean jj_3R_87()
 {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_95()
 {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_117()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    }
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_103()
 {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3R_108()
 {
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_112()
 {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_114()
 {
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_125()
 {
    if (jj_scan_token(70)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3R_116()
 {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_118()
 {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_120()
 {
    if (jj_3R_122()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    return false;
  }

  static private boolean jj_3R_122()
 {
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_124()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_142()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_141()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    return false;
  }

  static private boolean jj_3R_140()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_134()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_100()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_77()
 {
    if (jj_scan_token(62)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_106()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_99()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_91()
 {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_83()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_92()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_98()
 {
    if (jj_3R_89()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_75()
 {
    if (jj_scan_token(59)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_110()
 {
    if (jj_scan_token(58)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_82()
 {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  static private boolean jj_3R_105()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_90()
 {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81()
 {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_89()
 {
    Token xsp;
    if (jj_scan_token(57)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(57)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_74()
 {
    if (jj_scan_token(55)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_101()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_111()
 {
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_68()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_67()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_66()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_102()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_44()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image != "function";
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_107()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_132()
 {
    if (jj_3R_139()) return true;
    return false;
  }

  static private boolean jj_3R_93()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(62)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(59)) return true;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(62)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(59)) return true;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_139()
 {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_131()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  static private boolean jj_3R_150()
 {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_147()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_138()
 {
    Token xsp;
    if (jj_3R_147()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_59()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_58()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_128()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_130()
 {
    if (jj_3R_137()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_70()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_146()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_137()
 {
    if (jj_3R_146()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_69()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  static private boolean jj_3R_145()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_152()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(62)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    if (jj_scan_token(63)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_149()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_136()
 {
    if (jj_3R_144()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_144()
 {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(61)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_151()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(61)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_127()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_148()
 {
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_143()
 {
    Token xsp;
    if (jj_3R_148()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_135()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3R_129()
 {
    if (jj_scan_token(59)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_51()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  static private boolean jj_3R_94()
 {
    if (jj_scan_token(91)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_86()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image != "function";
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  static private boolean jj_3R_126()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_scan_token(59)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_71()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_85()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_78()
 {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavascriptTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10200000,0x0,0x0,0x0,0x90210000,0x0,0x90210000,0x0,0x0,0x0,0x0,0x0,0x10200000,0x80010000,0x80010000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90210000,0x0,0x0,0x200000,0x0,0xfc734800,0x0,0x0,0xfc734800,0x200000,0x1000,0x1000,0x8000,0x1000,0xfc734800,0xfc734800,0x0,0x90210000,0x90210000,0x90210000,0x90210000,0x2000,0x80000,0x2000,0x0,0x0,0x0,0x200000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x48c00078,0x78,0x2000000,0x2000000,0x4cc0007a,0x2000000,0x4cc0007a,0x400000,0x2000000,0x0,0x0,0x0,0x48c00078,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48c0007a,0x0,0x2000000,0x0,0x1,0x48c0007e,0x2000000,0x0,0x48c0007f,0x0,0x0,0x0,0x0,0x0,0x48c0007f,0x48c0007f,0x1,0x48c0007b,0x48c0007a,0x48c0007a,0x48c0007b,0x0,0x0,0x0,0x400000,0x400000,0x2000000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x3f,0x0,0x3f,0x0,0x0,0x3,0x3,0x3,0x0,0x3c,0x3c,0x40,0x380,0x380,0x30,0x1c00,0x1c00,0x1e000,0x1e000,0x1e0000,0x1e0000,0x200000,0x400000,0x800000,0x1000000,0x2000000,0x4000000,0xf8000000,0x3f,0xf0000000,0x0,0x0,0x0,0x3f,0x0,0x8000000,0x3f,0x0,0x0,0x0,0x0,0x0,0x3f,0x3f,0x0,0x3f,0x3f,0x3f,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0x0,0xff,0x0,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public Javascript(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Javascript(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavascriptTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 60; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 60; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Javascript(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JavascriptTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 60; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavascriptTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 60; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Javascript(JavascriptTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 60; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavascriptTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 60; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[105];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 60; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 105; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 14; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
